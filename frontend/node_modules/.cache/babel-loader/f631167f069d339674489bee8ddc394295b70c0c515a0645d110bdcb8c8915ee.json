{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\n  var _value$match;\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\n});\nconst assignCss = (target, variantVar, value) => {\n  if (variantVar.includes('Color')) {\n    target.color = value;\n  }\n  if (variantVar.includes('Bg')) {\n    target.backgroundColor = value;\n  }\n  if (variantVar.includes('Border')) {\n    target.borderColor = value;\n  }\n};\n\n/**\r\n *\r\n * @param name variant name\r\n * @example 'plain'\r\n *\r\n * @param palette object that contains palette tokens\r\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palette }\r\n *\r\n * @param getCssVar a function that receive variant token and return a CSS variable\r\n *\r\n * result will be the stylesheet based on the palette tokens\r\n * @example {\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '0px',\r\n * }\r\n * @example {\r\n *   cursor: 'pointer',\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '1px',\r\n * }\r\n * @example {\r\n *   pointerEvents: 'none',\r\n *   cursor: 'default',\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '0px',\r\n * }\r\n */\nexport const createVariantStyle = (name, palette, getCssVar) => {\n  const result = {};\n  Object.entries(palette || {}).forEach(([variantVar, value]) => {\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\n      if (variantVar.includes('Disabled')) {\n        result.pointerEvents = 'none';\n        result.cursor = 'default';\n        result['--Icon-color'] = 'currentColor';\n      }\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\n        assignCss(result, variantVar, cssVar);\n      } else {\n        // initial state\n        if (!result['--variant-borderWidth']) {\n          // important to prevent inheritance, otherwise the children will have the wrong styles e.g.\n          //   <Card variant=\"outlined\">\n          //     <Typography variant=\"soft\">\n          result['--variant-borderWidth'] = '0px';\n        }\n        if (variantVar.includes('Border')) {\n          result['--variant-borderWidth'] = '1px';\n          result.border = 'var(--variant-borderWidth) solid';\n        }\n        // border color should come later\n        assignCss(result, variantVar, cssVar);\n      }\n    }\n  });\n  return result;\n};\n// It's used only in extendTheme, so it's safe to always include default values\nexport const createVariant = (variant, theme) => {\n  let result = {};\n  if (theme) {\n    const {\n      getCssVar,\n      palette\n    } = theme;\n    Object.entries(palette).forEach(entry => {\n      const [color, colorPalette] = entry;\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\n        result = _extends({}, result, {\n          [color]: createVariantStyle(variant, colorPalette, variantVar => `var(--variant-${variantVar}, ${getCssVar(`palette-${color}-${variantVar}`, palette[color][variantVar])})`)\n        });\n      }\n    });\n  }\n  result.context = createVariantStyle(variant, {\n    plainColor: 'var(--variant-plainColor)',\n    plainHoverColor: `var(--variant-plainHoverColor)`,\n    plainHoverBg: 'var(--variant-plainHoverBg)',\n    plainActiveBg: 'var(--variant-plainActiveBg)',\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\n    outlinedColor: 'var(--variant-outlinedColor)',\n    outlinedBorder: 'var(--variant-outlinedBorder)',\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\n    softColor: 'var(--variant-softColor)',\n    softBg: 'var(--variant-softBg)',\n    softHoverColor: 'var(--variant-softHoverColor)',\n    softHoverBg: 'var(--variant-softHoverBg)',\n    softActiveBg: 'var(--variant-softActiveBg)',\n    softDisabledColor: 'var(--variant-softDisabledColor)',\n    softDisabledBg: 'var(--variant-softDisabledBg)',\n    solidColor: 'var(--variant-solidColor)',\n    solidBg: 'var(--variant-solidBg)',\n    solidHoverBg: 'var(--variant-solidHoverBg)',\n    solidActiveBg: 'var(--variant-solidActiveBg)',\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\n  });\n  return result;\n};","map":{"version":3,"names":["_extends","isVariantPalette","colorPalette","Object","keys","some","value","_value$match","match","call","assignCss","target","variantVar","includes","color","backgroundColor","borderColor","createVariantStyle","name","palette","getCssVar","result","entries","forEach","RegExp","cssVar","pointerEvents","cursor","border","createVariant","variant","theme","entry","context","plainColor","plainHoverColor","plainHoverBg","plainActiveBg","plainDisabledColor","outlinedColor","outlinedBorder","outlinedHoverColor","outlinedHoverBorder","outlinedHoverBg","outlinedActiveBg","outlinedDisabledColor","outlinedDisabledBorder","softColor","softBg","softHoverColor","softHoverBg","softActiveBg","softDisabledColor","softDisabledBg","solidColor","solidBg","solidHoverBg","solidActiveBg","solidDisabledColor","solidDisabledBg"],"sources":["C:/Users/josia/JSProjects/Metro-Event-1/frontend/node_modules/@mui/joy/styles/variantUtils.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nexport const isVariantPalette = colorPalette => colorPalette && typeof colorPalette === 'object' && Object.keys(colorPalette).some(value => {\r\n  var _value$match;\r\n  return (_value$match = value.match) == null ? void 0 : _value$match.call(value, /^(plain(Hover|Active|Disabled)?(Color|Bg)|outlined(Hover|Active|Disabled)?(Color|Border|Bg)|soft(Hover|Active|Disabled)?(Color|Bg)|solid(Hover|Active|Disabled)?(Color|Bg))$/);\r\n});\r\nconst assignCss = (target, variantVar, value) => {\r\n  if (variantVar.includes('Color')) {\r\n    target.color = value;\r\n  }\r\n  if (variantVar.includes('Bg')) {\r\n    target.backgroundColor = value;\r\n  }\r\n  if (variantVar.includes('Border')) {\r\n    target.borderColor = value;\r\n  }\r\n};\r\n\r\n/**\r\n *\r\n * @param name variant name\r\n * @example 'plain'\r\n *\r\n * @param palette object that contains palette tokens\r\n * @example { primary: { plainColor: '', plainHoverColor: '', ...tokens }, ...other palette }\r\n *\r\n * @param getCssVar a function that receive variant token and return a CSS variable\r\n *\r\n * result will be the stylesheet based on the palette tokens\r\n * @example {\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '0px',\r\n * }\r\n * @example {\r\n *   cursor: 'pointer',\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '1px',\r\n * }\r\n * @example {\r\n *   pointerEvents: 'none',\r\n *   cursor: 'default',\r\n *   color: '--token',\r\n *   backgroundColor: '--token',\r\n *   '--variant-borderWidth': '0px',\r\n * }\r\n */\r\nexport const createVariantStyle = (name, palette, getCssVar) => {\r\n  const result = {};\r\n  Object.entries(palette || {}).forEach(([variantVar, value]) => {\r\n    if (variantVar.match(new RegExp(`${name}(color|bg|border)`, 'i')) && !!value) {\r\n      const cssVar = getCssVar ? getCssVar(variantVar) : value;\r\n      if (variantVar.includes('Disabled')) {\r\n        result.pointerEvents = 'none';\r\n        result.cursor = 'default';\r\n        result['--Icon-color'] = 'currentColor';\r\n      }\r\n      if (variantVar.match(/(Hover|Active|Disabled)/)) {\r\n        assignCss(result, variantVar, cssVar);\r\n      } else {\r\n        // initial state\r\n        if (!result['--variant-borderWidth']) {\r\n          // important to prevent inheritance, otherwise the children will have the wrong styles e.g.\r\n          //   <Card variant=\"outlined\">\r\n          //     <Typography variant=\"soft\">\r\n          result['--variant-borderWidth'] = '0px';\r\n        }\r\n        if (variantVar.includes('Border')) {\r\n          result['--variant-borderWidth'] = '1px';\r\n          result.border = 'var(--variant-borderWidth) solid';\r\n        }\r\n        // border color should come later\r\n        assignCss(result, variantVar, cssVar);\r\n      }\r\n    }\r\n  });\r\n  return result;\r\n};\r\n// It's used only in extendTheme, so it's safe to always include default values\r\nexport const createVariant = (variant, theme) => {\r\n  let result = {};\r\n  if (theme) {\r\n    const {\r\n      getCssVar,\r\n      palette\r\n    } = theme;\r\n    Object.entries(palette).forEach(entry => {\r\n      const [color, colorPalette] = entry;\r\n      if (isVariantPalette(colorPalette) && typeof colorPalette === 'object') {\r\n        result = _extends({}, result, {\r\n          [color]: createVariantStyle(variant, colorPalette, variantVar => `var(--variant-${variantVar}, ${getCssVar(`palette-${color}-${variantVar}`, palette[color][variantVar])})`)\r\n        });\r\n      }\r\n    });\r\n  }\r\n  result.context = createVariantStyle(variant, {\r\n    plainColor: 'var(--variant-plainColor)',\r\n    plainHoverColor: `var(--variant-plainHoverColor)`,\r\n    plainHoverBg: 'var(--variant-plainHoverBg)',\r\n    plainActiveBg: 'var(--variant-plainActiveBg)',\r\n    plainDisabledColor: 'var(--variant-plainDisabledColor)',\r\n    outlinedColor: 'var(--variant-outlinedColor)',\r\n    outlinedBorder: 'var(--variant-outlinedBorder)',\r\n    outlinedHoverColor: `var(--variant-outlinedHoverColor)`,\r\n    outlinedHoverBorder: `var(--variant-outlinedHoverBorder)`,\r\n    outlinedHoverBg: `var(--variant-outlinedHoverBg)`,\r\n    outlinedActiveBg: `var(--variant-outlinedActiveBg)`,\r\n    outlinedDisabledColor: `var(--variant-outlinedDisabledColor)`,\r\n    outlinedDisabledBorder: `var(--variant-outlinedDisabledBorder)`,\r\n    softColor: 'var(--variant-softColor)',\r\n    softBg: 'var(--variant-softBg)',\r\n    softHoverColor: 'var(--variant-softHoverColor)',\r\n    softHoverBg: 'var(--variant-softHoverBg)',\r\n    softActiveBg: 'var(--variant-softActiveBg)',\r\n    softDisabledColor: 'var(--variant-softDisabledColor)',\r\n    softDisabledBg: 'var(--variant-softDisabledBg)',\r\n    solidColor: 'var(--variant-solidColor)',\r\n    solidBg: 'var(--variant-solidBg)',\r\n    solidHoverBg: 'var(--variant-solidHoverBg)',\r\n    solidActiveBg: 'var(--variant-solidActiveBg)',\r\n    solidDisabledColor: 'var(--variant-solidDisabledColor)',\r\n    solidDisabledBg: 'var(--variant-solidDisabledBg)'\r\n  });\r\n  return result;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}